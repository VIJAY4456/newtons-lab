{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vijay\\\\Desktop\\\\Newton Project\\\\newton\\\\src\\\\components\\\\Chatbot\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Chatbot.css\"; // Import your CSS file for styling\n\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from \"@chatscope/chat-ui-kit-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"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\";\nconst systemMessage = {\n  role: \"system\",\n  content: \"Explain things like you're talking to a software professional with 2 years of experience.\"\n};\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    content: \"Hello, I'm ChatGPT! Ask me anything!\",\n    role: \"assistant\",\n    sentTime: new Date()\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [error, setError] = useState(null);\n  const handleSend = async message => {\n    const newMessage = {\n      content: message,\n      role: \"user\",\n      sentTime: new Date()\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setIsTyping(true);\n    try {\n      await processMessageToChatGPT(newMessages);\n    } catch (error) {\n      setError(\"Failed to send message. Please try again.\");\n    }\n  };\n  async function processMessageToChatGPT(chatMessages) {\n    let apiMessages = chatMessages.map(messageObject => {\n      let role = \"\";\n      if (messageObject.role === \"assistant\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return {\n        role: role,\n        content: messageObject.content\n      };\n    });\n    const apiRequestBody = {\n      model: \"gpt-3.5-turbo\",\n      messages: [systemMessage, ...apiMessages]\n    };\n    try {\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          Authorization: \"Bearer \" + API_KEY,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(apiRequestBody)\n      });\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      const data = await response.json();\n      setMessages([...chatMessages, {\n        content: data.choices[0].message.content,\n        role: \"assistant\",\n        sentTime: new Date()\n      }]);\n      setIsTyping(false);\n    } catch (error) {\n      console.error(\"There was a problem with the fetch operation:\", error);\n      setIsTyping(false);\n      throw new Error(\"Failed to fetch response from the server\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-part\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"newton\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"sub admin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"chatbot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"User\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Documentation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Upgrade\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-part\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatArea\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: \"relative\",\n              height: \"800px\",\n              width: \"700px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(MainContainer, {\n              children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n                children: [/*#__PURE__*/_jsxDEV(MessageList, {\n                  scrollBehavior: \"smooth\",\n                  typingIndicator: isTyping ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n                    content: \"ChatGPT is typing\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 132,\n                    columnNumber: 25\n                  }, this) : null,\n                  children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(Message, {\n                    model: message\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 137,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n                  placeholder: \"Type message here\",\n                  onSend: handleSend\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Error: \", error]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"G/SxI7ddK/DsiXuSHLAtQxsC7VU=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","API_KEY","systemMessage","role","content","Chatbot","_s","messages","setMessages","sentTime","Date","isTyping","setIsTyping","error","setError","handleSend","message","newMessage","newMessages","processMessageToChatGPT","chatMessages","apiMessages","map","messageObject","apiRequestBody","model","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","Error","data","json","choices","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","position","height","width","scrollBehavior","typingIndicator","i","placeholder","onSend","_c","$RefreshReg$"],"sources":["C:/Users/vijay/Desktop/Newton Project/newton/src/components/Chatbot/Chatbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Chatbot.css\"; // Import your CSS file for styling\r\n\r\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\r\nimport {\r\n  MainContainer,\r\n  ChatContainer,\r\n  MessageList,\r\n  Message,\r\n  MessageInput,\r\n  TypingIndicator,\r\n} from \"@chatscope/chat-ui-kit-react\";\r\n\r\nconst API_KEY = \"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\";\r\nconst systemMessage = {\r\n  role: \"system\",\r\n  content:\r\n    \"Explain things like you're talking to a software professional with 2 years of experience.\",\r\n};\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      content: \"Hello, I'm ChatGPT! Ask me anything!\",\r\n      role: \"assistant\",\r\n      sentTime: new Date(),\r\n    },\r\n  ]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleSend = async (message) => {\r\n    const newMessage = {\r\n      content: message,\r\n      role: \"user\",\r\n      sentTime: new Date(),\r\n    };\r\n\r\n    const newMessages = [...messages, newMessage];\r\n\r\n    setMessages(newMessages);\r\n\r\n    setIsTyping(true);\r\n    try {\r\n      await processMessageToChatGPT(newMessages);\r\n    } catch (error) {\r\n      setError(\"Failed to send message. Please try again.\");\r\n    }\r\n  };\r\n\r\n  async function processMessageToChatGPT(chatMessages) {\r\n    let apiMessages = chatMessages.map((messageObject) => {\r\n      let role = \"\";\r\n      if (messageObject.role === \"assistant\") {\r\n        role = \"assistant\";\r\n      } else {\r\n        role = \"user\";\r\n      }\r\n      return { role: role, content: messageObject.content };\r\n    });\r\n\r\n    const apiRequestBody = {\r\n      model: \"gpt-3.5-turbo\",\r\n      messages: [systemMessage, ...apiMessages],\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\r\n        \"https://api.openai.com/v1/chat/completions\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            Authorization: \"Bearer \" + API_KEY,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(apiRequestBody),\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Network response was not ok\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      setMessages([\r\n        ...chatMessages,\r\n        {\r\n          content: data.choices[0].message.content,\r\n          role: \"assistant\",\r\n          sentTime: new Date(),\r\n        },\r\n      ]);\r\n      setIsTyping(false);\r\n    } catch (error) {\r\n      console.error(\"There was a problem with the fetch operation:\", error);\r\n      setIsTyping(false);\r\n      throw new Error(\"Failed to fetch response from the server\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"left-part\">\r\n        <div className=\"sidebar\">\r\n          <h1>newton</h1>\r\n          <h1>sub admin</h1>\r\n          <ul>\r\n            <li>chatbot</li>\r\n            <li>Account</li>\r\n            <li>User</li>\r\n            <li>Documentation</li>\r\n            <li>Upgrade</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div className=\"right-part\">\r\n        <div className=\"chatArea\">\r\n          <div className=\"App\">\r\n            <div\r\n              style={{\r\n                position: \"relative\",\r\n                height: \"800px\",\r\n                width: \"700px\",\r\n              }}\r\n            >\r\n              <MainContainer>\r\n                <ChatContainer>\r\n                  <MessageList\r\n                    scrollBehavior=\"smooth\"\r\n                    typingIndicator={\r\n                      isTyping ? (\r\n                        <TypingIndicator content=\"ChatGPT is typing\" />\r\n                      ) : null\r\n                    }\r\n                  >\r\n                    {messages.map((message, i) => (\r\n                      <Message key={i} model={message} />\r\n                    ))}\r\n                  </MessageList>\r\n                  <MessageInput\r\n                    placeholder=\"Type message here\"\r\n                    onSend={handleSend}\r\n                  />\r\n                </ChatContainer>\r\n              </MainContainer>\r\n              {error && <div>Error: {error}</div>}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vijay\\\\Desktop\\\\Newton Project\\\\newton\\\\src\\\\components\\\\Chatbot\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Chatbot.css\"; // Import your CSS file for styling\n\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from \"@chatscope/chat-ui-kit-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"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\";\n// \"Explain things like you would to a 10 year old learning how to code.\"\nconst systemMessage = {\n  //  Explain things like you're talking to a software professional with 5 years of experience.\n  role: \"system\",\n  content: \"Explain things like you're talking to a software professional with 2 years of experience.\"\n};\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I'm ChatGPT! Ask me anything!\",\n    sentTime: \"just now\",\n    sender: \"ChatGPT\"\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const handleSend = async message => {\n    const newMessage = {\n      message,\n      direction: \"outgoing\",\n      sender: \"user\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n\n    // Initial system message to determine ChatGPT functionality\n    // How it responds, how it talks, etc.\n    setIsTyping(true);\n    await processMessageToChatGPT(newMessages);\n  };\n  async function processMessageToChatGPT(chatMessages) {\n    // messages is an array of messages\n    // Format messages for chatGPT API\n    // API is expecting objects in format of { role: \"user\" or \"assistant\", \"content\": \"message here\"}\n    // So we need to reformat\n\n    let apiMessages = chatMessages.map(messageObject => {\n      let role = \"\";\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return {\n        role: role,\n        content: messageObject.message\n      };\n    });\n\n    // Get the request body set up with the model we plan to use\n    // and the messages which we formatted above. We add a system message in the front to'\n    // determine how we want chatGPT to act.\n    const apiRequestBody = {\n      model: \"gpt-3.5-turbo\",\n      messages: [systemMessage,\n      // The system message DEFINES the logic of our chatGPT\n      ...apiMessages // The messages from our chat with ChatGPT\n      ]\n    };\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then(data => {\n      return data.json();\n    }).then(data => {\n      console.log(data);\n      setMessages([...chatMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n      setIsTyping(false);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-part\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"newton\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"sub admin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"chatbot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"User\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Documentation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Upgrade\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-part\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatArea\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: message.author,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"App\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: \"relative\",\n                height: \"800px\",\n                width: \"700px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(MainContainer, {\n                children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n                  children: [/*#__PURE__*/_jsxDEV(MessageList, {\n                    scrollBehavior: \"smooth\",\n                    typingIndicator: isTyping ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n                      content: \"ChatGPT is typing\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 139,\n                      columnNumber: 27\n                    }, this) : null,\n                    children: messages.map((message, i) => {\n                      console.log(message);\n                      return /*#__PURE__*/_jsxDEV(Message, {\n                        model: message\n                      }, i, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 145,\n                        columnNumber: 32\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 135,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n                    placeholder: \"Type message here\",\n                    onSend: handleSend\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 148,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"m9BRi4F0ROhTToY/nrP6uqzifKU=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","API_KEY","systemMessage","role","content","Chatbot","_s","messages","setMessages","message","sentTime","sender","isTyping","setIsTyping","handleSend","newMessage","direction","newMessages","processMessageToChatGPT","chatMessages","apiMessages","map","messageObject","apiRequestBody","model","fetch","method","headers","Authorization","body","JSON","stringify","then","data","json","console","log","choices","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","author","text","style","position","height","width","scrollBehavior","typingIndicator","i","placeholder","onSend","_c","$RefreshReg$"],"sources":["C:/Users/vijay/Desktop/Newton Project/newton/src/components/Chatbot/Chatbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Chatbot.css\"; // Import your CSS file for styling\r\n\r\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\r\nimport {\r\n  MainContainer,\r\n  ChatContainer,\r\n  MessageList,\r\n  Message,\r\n  MessageInput,\r\n  TypingIndicator,\r\n} from \"@chatscope/chat-ui-kit-react\";\r\n\r\nconst API_KEY = \"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\";\r\n// \"Explain things like you would to a 10 year old learning how to code.\"\r\nconst systemMessage = {\r\n  //  Explain things like you're talking to a software professional with 5 years of experience.\r\n  role: \"system\",\r\n  content:\r\n    \"Explain things like you're talking to a software professional with 2 years of experience.\",\r\n};\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      message: \"Hello, I'm ChatGPT! Ask me anything!\",\r\n      sentTime: \"just now\",\r\n      sender: \"ChatGPT\",\r\n    },\r\n  ]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  const handleSend = async (message) => {\r\n    const newMessage = {\r\n      message,\r\n      direction: \"outgoing\",\r\n      sender: \"user\",\r\n    };\r\n\r\n    const newMessages = [...messages, newMessage];\r\n\r\n    setMessages(newMessages);\r\n\r\n    // Initial system message to determine ChatGPT functionality\r\n    // How it responds, how it talks, etc.\r\n    setIsTyping(true);\r\n    await processMessageToChatGPT(newMessages);\r\n  };\r\n\r\n  async function processMessageToChatGPT(chatMessages) {\r\n    // messages is an array of messages\r\n    // Format messages for chatGPT API\r\n    // API is expecting objects in format of { role: \"user\" or \"assistant\", \"content\": \"message here\"}\r\n    // So we need to reformat\r\n\r\n    let apiMessages = chatMessages.map((messageObject) => {\r\n      let role = \"\";\r\n      if (messageObject.sender === \"ChatGPT\") {\r\n        role = \"assistant\";\r\n      } else {\r\n        role = \"user\";\r\n      }\r\n      return { role: role, content: messageObject.message };\r\n    });\r\n\r\n    // Get the request body set up with the model we plan to use\r\n    // and the messages which we formatted above. We add a system message in the front to'\r\n    // determine how we want chatGPT to act.\r\n    const apiRequestBody = {\r\n      model: \"gpt-3.5-turbo\",\r\n      messages: [\r\n        systemMessage, // The system message DEFINES the logic of our chatGPT\r\n        ...apiMessages, // The messages from our chat with ChatGPT\r\n      ],\r\n    };\r\n\r\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + API_KEY,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(apiRequestBody),\r\n    })\r\n      .then((data) => {\r\n        return data.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(data);\r\n        setMessages([\r\n          ...chatMessages,\r\n          {\r\n            message: data.choices[0].message.content,\r\n            sender: \"ChatGPT\",\r\n          },\r\n        ]);\r\n        setIsTyping(false);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"left-part\">\r\n        <div className=\"sidebar\">\r\n          <h1>newton</h1>\r\n          <h1>sub admin</h1>\r\n          <ul>\r\n            <li>chatbot</li>\r\n            <li>Account</li>\r\n            <li>User</li>\r\n            <li>Documentation</li>\r\n            <li>Upgrade</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div className=\"right-part\">\r\n        <div className=\"chatArea\">\r\n          {/* Display messages */}\r\n          {messages.map((message, index) => (\r\n            <div key={index} className={message.author}>\r\n              {message.text}\r\n            </div>\r\n          ))}\r\n          {/* User input form */}\r\n          <div>\r\n            <div className=\"App\">\r\n              <div\r\n                style={{\r\n                  position: \"relative\",\r\n                  height: \"800px\",\r\n                  width: \"700px\",\r\n                }}\r\n              >\r\n                <MainContainer>\r\n                  <ChatContainer>\r\n                    <MessageList\r\n                      scrollBehavior=\"smooth\"\r\n                      typingIndicator={\r\n                        isTyping ? (\r\n                          <TypingIndicator content=\"ChatGPT is typing\" />\r\n                        ) : null\r\n                      }\r\n                    >\r\n                      {messages.map((message, i) => {\r\n                        console.log(message);\r\n                        return <Message key={i} model={message} />;\r\n                      })}\r\n                    </MessageList>\r\n                    <MessageInput\r\n                      placeholder=\"Type message here\"\r\n                      onSend={handleSend}\r\n                    />\r\n                  </ChatContainer>\r\n                </MainContainer>\r\n              </div>\r\n            </div>\r\n\r\n            {/* <input type=\"text\" placeholder=\"Type your message...\" />\r\n            <button onClick={handleMessageSend}>Send</button> */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vijay\\\\Desktop\\\\Newton Project\\\\newton\\\\src\\\\components\\\\Chatbot\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Chatbot.css\"; // Import your CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I'm ChatGPT! Ask me anything!\",\n    sender: \"ChatGPT\"\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const handleSend = () => {\n    if (newMessage.trim() === \"\") return;\n    const newMessages = [...messages, {\n      message: newMessage,\n      sender: \"user\"\n    }];\n    setMessages(newMessages);\n    setNewMessage(\"\");\n    setIsTyping(true);\n  };\n  useEffect(() => {\n    if (messages.length > 0 && messages[messages.length - 1].sender === \"user\") {\n      processMessageToChatGPT(messages);\n    }\n  }, [messages]);\n  const processMessageToChatGPT = chatMessages => {\n    // Simulate processing message with ChatGPT (Replace with your API call)\n    setTimeout(() => {\n      const responseMessage = {\n        message: \"Here's a response from ChatGPT!\",\n        sender: \"ChatGPT\"\n      };\n      setMessages([...chatMessages, responseMessage]);\n      setIsTyping(false);\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatArea\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-list\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: message.message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message ChatGPT\",\n          children: \"ChatGPT is typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type message here\",\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"d6NziwcEcmWQZVCeJSisxfxgy8M=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","message","sender","isTyping","setIsTyping","newMessage","setNewMessage","handleSend","trim","newMessages","length","processMessageToChatGPT","chatMessages","setTimeout","responseMessage","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/vijay/Desktop/Newton Project/newton/src/components/Chatbot/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Chatbot.css\"; // Import your CSS file for styling\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      message: \"Hello, I'm ChatGPT! Ask me anything!\",\r\n      sender: \"ChatGPT\",\r\n    },\r\n  ]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n  const handleSend = () => {\r\n    if (newMessage.trim() === \"\") return;\r\n    const newMessages = [...messages, { message: newMessage, sender: \"user\" }];\r\n    setMessages(newMessages);\r\n    setNewMessage(\"\");\r\n    setIsTyping(true);\r\n  };\r\n\r\n useEffect(() => {\r\n  if (messages.length > 0 && messages[messages.length - 1].sender === \"user\") {\r\n    processMessageToChatGPT(messages);\r\n  }\r\n}, [messages]);\r\n\r\n\r\n  const processMessageToChatGPT = (chatMessages) => {\r\n    // Simulate processing message with ChatGPT (Replace with your API call)\r\n    setTimeout(() => {\r\n      const responseMessage = {\r\n        message: \"Here's a response from ChatGPT!\",\r\n        sender: \"ChatGPT\",\r\n      };\r\n      setMessages([...chatMessages, responseMessage]);\r\n      setIsTyping(false);\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatArea\">\r\n        <div className=\"message-list\">\r\n          {messages.map((message, index) => (\r\n            <div key={index} className={`message ${message.sender}`}>\r\n              {message.message}\r\n            </div>\r\n          ))}\r\n          {isTyping && <div className=\"message ChatGPT\">ChatGPT is typing...</div>}\r\n        </div>\r\n        <div className=\"message-input\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Type message here\"\r\n            value={newMessage}\r\n            onChange={(e) => setNewMessage(e.target.value)}\r\n          />\r\n          <button onClick={handleSend}>Send</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vijay\\\\Desktop\\\\Newton Project\\\\newton\\\\src\\\\components\\\\Chatbot\\\\Chatbot.js\",\n  _s = $RefreshSig$();\n// Chatbot.jsx\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./Chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [prompt, setPrompt] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const HTTP = \"http://localhost:8080/chat\";\n  const handleSubmit = e => {\n    e.preventDefault();\n    setIsLoading(true);\n    axios.post(HTTP, {\n      prompt\n    }).then(res => {\n      setResponse(res.data);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n      // Handle error, show error message to the user\n    }).finally(() => {\n      setIsLoading(false);\n    });\n    setPrompt(\"\");\n  };\n  const handlePrompt = e => {\n    setPrompt(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container container-sm p-1\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title text-center text-darkGreen\",\n      children: \"ChatGPT API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"prompt\",\n          children: \"Ask questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"prompt\",\n          className: \"shadow-sm\",\n          type: \"text\",\n          placeholder: \"Enter text\",\n          value: prompt,\n          onChange: handlePrompt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-accept w-100\",\n        type: \"submit\",\n        disabled: isLoading,\n        children: isLoading ? \"Loading...\" : \"Go\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-darkGreen mt-2 p-1 border-5\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-light\",\n        children: response || \"Ask me anything...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"hQccvEKqWrAa9NDiaEN5hBWztB4=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","prompt","setPrompt","response","setResponse","isLoading","setIsLoading","HTTP","handleSubmit","e","preventDefault","post","then","res","data","catch","error","console","finally","handlePrompt","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","id","type","placeholder","onChange","disabled","_c","$RefreshReg$"],"sources":["C:/Users/vijay/Desktop/Newton Project/newton/src/components/Chatbot/Chatbot.js"],"sourcesContent":["// Chatbot.jsx\r\nimport React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./Chatbot.css\";\r\n\r\nconst Chatbot = () => {\r\n  const [prompt, setPrompt] = useState(\"\");\r\n  const [response, setResponse] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const HTTP = \"http://localhost:8080/chat\";\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    axios\r\n      .post(HTTP, { prompt })\r\n      .then((res) => {\r\n        setResponse(res.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n        // Handle error, show error message to the user\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n\r\n    setPrompt(\"\");\r\n  };\r\n\r\n  const handlePrompt = (e) => {\r\n    setPrompt(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container container-sm p-1\">\r\n      <h1 className=\"title text-center text-darkGreen\">ChatGPT API</h1>\r\n      <form className=\"form\" onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"prompt\">Ask questions</label>\r\n          <input\r\n            id=\"prompt\"\r\n            className=\"shadow-sm\"\r\n            type=\"text\"\r\n            placeholder=\"Enter text\"\r\n            value={prompt}\r\n            onChange={handlePrompt}\r\n          />\r\n        </div>\r\n        <button className=\"btn btn-accept w-100\" type=\"submit\" disabled={isLoading}>\r\n          {isLoading ? \"Loading...\" : \"Go\"}\r\n        </button>\r\n      </form>\r\n      <div className=\"bg-darkGreen mt-2 p-1 border-5\">\r\n        <p className=\"text-light\">{response || \"Ask me anything...\"}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
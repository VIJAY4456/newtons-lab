{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vijay\\\\Desktop\\\\Newton Project\\\\newton\\\\src\\\\components\\\\Chatbot\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chatbot.css'; // Import your CSS file for styling\n\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"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\";\n// \"Explain things like you would to a 10 year old learning how to code.\"\nconst systemMessage = {\n  //  Explain things like you're talking to a software professional with 5 years of experience.\n  \"role\": \"system\",\n  \"content\": \"Explain things like you're talking to a software professional with 2 years of experience.\"\n};\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I'm ChatGPT! Ask me anything!\",\n    sentTime: \"just now\",\n    sender: \"ChatGPT\"\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const handleSend = async message => {\n    const newMessage = {\n      message,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n\n    // Initial system message to determine ChatGPT functionality\n    // How it responds, how it talks, etc.\n    setIsTyping(true);\n    await processMessageToChatGPT(newMessages);\n  };\n  async function processMessageToChatGPT(chatMessages) {\n    // messages is an array of messages\n    // Format messages for chatGPT API\n    // API is expecting objects in format of { role: \"user\" or \"assistant\", \"content\": \"message here\"}\n    // So we need to reformat\n\n    let apiMessages = chatMessages.map(messageObject => {\n      let role = \"\";\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return {\n        role: role,\n        content: messageObject.message\n      };\n    });\n\n    // Get the request body set up with the model we plan to use\n    // and the messages which we formatted above. We add a system message in the front to'\n    // determine how we want chatGPT to act. \n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [systemMessage,\n      // The system message DEFINES the logic of our chatGPT\n      ...apiMessages // The messages from our chat with ChatGPT\n      ]\n    };\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then(data => {\n      return data.json();\n    }).then(data => {\n      console.log(data);\n      setMessages([...chatMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n      setIsTyping(false);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-part\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"newton\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"sub admin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"chatbot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"User\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Documentation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Upgrade\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-part\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatArea\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: message.author,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"BQ/qH5arUBNGb6sLWsI8KQ1pCC4=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","API_KEY","systemMessage","Chatbot","_s","messages","setMessages","message","sentTime","sender","isTyping","setIsTyping","handleSend","newMessage","direction","newMessages","processMessageToChatGPT","chatMessages","apiMessages","map","messageObject","role","content","apiRequestBody","fetch","method","headers","body","JSON","stringify","then","data","json","console","log","choices","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","author","text","_c","$RefreshReg$"],"sources":["C:/Users/vijay/Desktop/Newton Project/newton/src/components/Chatbot/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Chatbot.css'; // Import your CSS file for styling\r\n\r\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\r\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\r\n\r\nconst API_KEY = \"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\";\r\n// \"Explain things like you would to a 10 year old learning how to code.\"\r\nconst systemMessage = { //  Explain things like you're talking to a software professional with 5 years of experience.\r\n  \"role\": \"system\", \"content\": \"Explain things like you're talking to a software professional with 2 years of experience.\"\r\n}\r\nconst Chatbot = () => {\r\n    const [messages, setMessages] = useState([\r\n        {\r\n          message: \"Hello, I'm ChatGPT! Ask me anything!\",\r\n          sentTime: \"just now\",\r\n          sender: \"ChatGPT\"\r\n        }\r\n      ]);\r\n      const [isTyping, setIsTyping] = useState(false);\r\n    \r\n      const handleSend = async (message) => {\r\n        const newMessage = {\r\n          message,\r\n          direction: 'outgoing',\r\n          sender: \"user\"\r\n        };\r\n    \r\n        const newMessages = [...messages, newMessage];\r\n        \r\n        setMessages(newMessages);\r\n    \r\n        // Initial system message to determine ChatGPT functionality\r\n        // How it responds, how it talks, etc.\r\n        setIsTyping(true);\r\n        await processMessageToChatGPT(newMessages);\r\n      };\r\n    \r\n      async function processMessageToChatGPT(chatMessages) { // messages is an array of messages\r\n        // Format messages for chatGPT API\r\n        // API is expecting objects in format of { role: \"user\" or \"assistant\", \"content\": \"message here\"}\r\n        // So we need to reformat\r\n    \r\n        let apiMessages = chatMessages.map((messageObject) => {\r\n          let role = \"\";\r\n          if (messageObject.sender === \"ChatGPT\") {\r\n            role = \"assistant\";\r\n          } else {\r\n            role = \"user\";\r\n          }\r\n          return { role: role, content: messageObject.message}\r\n        });\r\n    \r\n    \r\n        // Get the request body set up with the model we plan to use\r\n        // and the messages which we formatted above. We add a system message in the front to'\r\n        // determine how we want chatGPT to act. \r\n        const apiRequestBody = {\r\n          \"model\": \"gpt-3.5-turbo\",\r\n          \"messages\": [\r\n            systemMessage,  // The system message DEFINES the logic of our chatGPT\r\n            ...apiMessages // The messages from our chat with ChatGPT\r\n          ]\r\n        }\r\n    \r\n        await fetch(\"https://api.openai.com/v1/chat/completions\", \r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Authorization\": \"Bearer \" + API_KEY,\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify(apiRequestBody)\r\n        }).then((data) => {\r\n          return data.json();\r\n        }).then((data) => {\r\n          console.log(data);\r\n          setMessages([...chatMessages, {\r\n            message: data.choices[0].message.content,\r\n            sender: \"ChatGPT\"\r\n          }]);\r\n          setIsTyping(false);\r\n        });\r\n      }\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className='left-part'>\r\n        <div className='sidebar'>\r\n          <h1>newton</h1>\r\n          <h1>sub admin</h1>\r\n          <ul>\r\n            <li>chatbot</li>\r\n            <li>Account</li>\r\n            <li>User</li>\r\n            <li>Documentation</li>\r\n            <li>Upgrade</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div className='right-part'>\r\n        <div className='chatArea'>\r\n          {/* Display messages */}\r\n          {messages.map((message, index) => (\r\n            <div key={index} className={message.author}>\r\n              {message.text}\r\n            </div>\r\n          ))}\r\n          {/* User input form */}\r\n          <div>\r\n\r\n\r\n            {/* <input type=\"text\" placeholder=\"Type your message...\" />\r\n            <button onClick={handleMessageSend}>Send</button> */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}